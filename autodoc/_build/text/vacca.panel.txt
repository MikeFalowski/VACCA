
vacca.panel module
******************

Custom widgets for panels, forms and buttons in Vacca


Classes
=======


SimplePanel
-----------

class class vacca.panel.SimplePanel(parent=None, designMode=False)


DomainButton
------------

class class vacca.panel.DomainButton(parent=None)


VaccaDocker
-----------

class class vacca.panel.VaccaDocker(*args)

   static getDefaultIcon()

      Returns:
         The Default Icon Path.

   static getPanelDescription(name='VaccaDocker', model='')

      Parameters:
         * **name** -- Name for the Panel

         * **model** -- Model for the panel

      Returns:

VaccaSplash
-----------

class class vacca.panel.VaccaSplash(timeout=10000)


VaccaPanel
----------

class class vacca.panel.VaccaPanel(parent=None, model=None, filters=[])

   Parameters:
      * **parent** --

      * **model** -- a device name or an state attribute

      * **palette** --

      * **bound** --

      * **filters** --

   Returns:
   It is a class that inherits from TaurusDevicePanel and Dropable
   module from fandango.

   In Init, the class VaccaPanel check if exist any shareDataManager
   to
      subscribe in it.

   This Widget shows the device Commands and Attributes, it is
   listening the shareDataManager to show the device selected
   information.

   The title of this Widget can be draggable.

   This class has the follow functionalities:

      * Title is draggable.

      * Is connected to shareDataManager to share information in the
        GUI.

   static getDefaultIcon()

      Returns:
         The Default Icon Path.

   static getPanelDescription(name='VaccaDevicePanel', model='')

      Parameters:
         * **name** -- Name for the Panel

         * **model** -- Model for the panel

      Returns:
   setModel(model, pixmap=None)

      Set Model is the callback used in shareDataManager to manage
      device selections.

      Parameters:
         * **model** -- Model to VaccaPanel

         * **pixmap** --

      Returns:

VaccaFinder
-----------

class class vacca.panel.VaccaFinder(parent=None, domains=None, regexp='*pnv-*', USE_SCROLL=True, USE_TREND=False)

   Convenience class to deal with alternatives to ArchivingBrowser
   when not available in the PYTHONPATH


VaccaAction
-----------

class class vacca.panel.VaccaAction(parent=None, designMode=False, default=None)


Functions
=========


configure_form
--------------

vacca.panel.configure_form(dev, form=None)

   Creates a TauForm and configures its Status fields


get_dev_attrs
-------------

vacca.panel.get_dev_attrs(dev)


init_qt
-------

vacca.panel.init_qt()


get_eqtype
----------

vacca.panel.get_eqtype(dev)

   It extracts the eqtype from a device name like domain/family
   /eqtype-serial

======================================================================

class class vacca.panel.DomainButton(parent=None)

   Bases: "PyQt4.QtGui.QToolButton"

   setLabel(txt)

   setModel(model, action)

   show(args=None)

class class vacca.panel.SimplePanel(parent=None, designMode=False)

   Bases: "taurus.qt.qtgui.container.tauruswidget.TaurusWidget"

   getInnerPanel()

   getModel()

   setModel(model)

class class vacca.panel.VaccaAction(parent=None, designMode=False, default=None)

   Bases: "PyQt4.QtGui.QToolButton",
   "taurus.qt.qtgui.base.taurusbase.TaurusBaseWidget"

   kill()

   setCommand(cmd)

   setModel(model)

   show(args=None)

class class vacca.panel.VaccaDocker(*args)

   Bases: "PyQt4.QtGui.QMainWindow"

   static getDefaultIcon()

      Returns:
         The Default Icon Path.

   static getPanelDescription(name='VaccaDocker', model='')

      Parameters:
         * **name** -- Name for the Panel

         * **model** -- Model for the panel

      Returns:
class class vacca.panel.VaccaFinder(parent=None, domains=None, regexp='*pnv-*', USE_SCROLL=True, USE_TREND=False)

   Bases: "PyTangoArchiving.widget.ArchivingBrowser.ArchivingBrowser"

   Convenience class to deal with alternatives to ArchivingBrowser
   when not available in the PYTHONPATH

class class vacca.panel.VaccaPanel(parent=None, model=None, filters=[])

   Bases: "fandango.qt.DropableQtKlass"

   Parameters:
      * **parent** --

      * **model** -- a device name or an state attribute

      * **palette** --

      * **bound** --

      * **filters** --

   Returns:
   It is a class that inherits from TaurusDevicePanel and Dropable
   module from fandango.

   In Init, the class VaccaPanel check if exist any shareDataManager
   to
      subscribe in it.

   This Widget shows the device Commands and Attributes, it is
   listening the shareDataManager to show the device selected
   information.

   The title of this Widget can be draggable.

   This class has the follow functionalities:

      * Title is draggable.

      * Is connected to shareDataManager to share information in the
        GUI.

   static getDefaultIcon()

      Returns:
         The Default Icon Path.

   static getPanelDescription(name='VaccaDevicePanel', model='')

      Parameters:
         * **name** -- Name for the Panel

         * **model** -- Model for the panel

      Returns:
   setModel(model, pixmap=None)

      Set Model is the callback used in shareDataManager to manage
      device selections.

      Parameters:
         * **model** -- Model to VaccaPanel

         * **pixmap** --

      Returns:
class class vacca.panel.VaccaSplash(timeout=10000)

   Bases: "PyQt4.QtGui.QSplashScreen", "fandango.objects.Singleton"

vacca.panel.configure_form(dev, form=None)

   Creates a TauForm and configures its Status fields

vacca.panel.get_dev_attrs(dev)

vacca.panel.get_eqtype(dev)

   It extracts the eqtype from a device name like domain/family
   /eqtype-serial

vacca.panel.init_qt()
