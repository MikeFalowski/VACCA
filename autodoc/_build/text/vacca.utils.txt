
vacca.utils module
******************

vacca.utils python module, by srubio@cells.es

vacca.utils contains several methods and classes for:

   * loading config files

   * manipulate Qt color palettes

   * custom Taurus event filters

This file is part of Tango Control System


Classes
=======


MyTaurusComponent
-----------------

class class vacca.utils.MyTaurusComponent(name='test')


WidgetAcceptDrops
-----------------

class class vacca.utils.WidgetAcceptDrops

   dropEvent(event)

      reimplemented to support drag&drop of models. See "QWidget"


EventFilter
-----------

class class vacca.utils.EventFilter(condition=None)


EventCounter
------------

class class vacca.utils.EventCounter(condition=None)


addCustomPanel2Gui
------------------

class class vacca.utils.addCustomPanel2Gui(extra_panels=None)

   this Class is used to add new panel to existing TaurusGUI with the
   same Context. Each extra_panel class should have a
   'getPaneldescription' and getDefaultIcon methods.

   Pass a dictionary like this:
      EXTRA_PANELS['VaccaProperties'] = {
         'class': vacca.VaccaPropTable, 'icon': ':/places/network-
         server.svg', }


Draggable
---------

class class vacca.utils.Draggable

   mouseMoveEvent(event)

      reimplemented to provide drag events

   mousePressEvent(event)

      reimplemented to provide drag events


OnChangeOrTimeEventFilter
-------------------------

class class vacca.utils.OnChangeOrTimeEventFilter

   The instances of this class will be callables that can be used as
   filters of repeated-value events. If the event type is Change or
   Periodic, it will only pass when its evt_value.value is different
   from that of the last event received from the same source and type.
   If evt_value.value is not available in the current event, the whole
   evt_value is used for comparison and as a future reference. But!,
   if setMaxDeltaTime is set, then any event that occurred more than
   Delta Time seconds  after the last one will be allowed to pass
   through the chain.

   This is useful to avoid processing repetitive events.

   Note that you cannot use this class as a filter: you need to use an
   instance of it.

   Note 2: Use a different instance each time you insert this filter
   into a different widget unless you *really* know what you are
   doing.

   Example of usage::
      evf = OnChangeOrTimeEventFilter() evf.setDeltaTime(60.) filters
      = [evf, IGNORE_CONFIG]
      MyTaurusComponentInstance.setEventFilters(filters,preqt=True)
      filterEvent(s, t, v, filters)


DraggableLabel
--------------

class class vacca.utils.DraggableLabel(parent=None, text='')


Functions
=========


get_shared_data_manager
-----------------------

vacca.utils.get_shared_data_manager()

   sdm = get_shared_data_manager() #Qt.qApp.SDM Singletone sdm.connec
   tReader('channelName',objectInstance.method,readOnConnect=False)
   #Using instantiated object/function instead of names!!
   sdm.connectWriter('SelectedInstrument',out_hook,'modelChanged')
   #'Channel', object, 'qt signal name'


get_solid_brush
---------------

vacca.utils.get_solid_brush(r, g, b, pattern=None)


get_shared_data_signals
-----------------------

vacca.utils.get_shared_data_signals()


wdir
----

vacca.utils.wdir(s)


vpath
-----

vacca.utils.vpath(s)


get_White_palette
-----------------

vacca.utils.get_White_palette(palette=None)


get_config_file
---------------

vacca.utils.get_config_file()


get_halfWhite_palette
---------------------

vacca.utils.get_halfWhite_palette(palette=None)


get_fullWhite_palette
---------------------

vacca.utils.get_fullWhite_palette(palette=None)

======================================================================

class class vacca.utils.Draggable

   Bases: "object"

   mouseMoveEvent(event)

      reimplemented to provide drag events

   mousePressEvent(event)

      reimplemented to provide drag events

   setDragEventCallback(hook)

class class vacca.utils.DraggableLabel(parent=None, text='')

   Bases: "vacca.utils.Draggable", "PyQt4.QtGui.QLabel"

class class vacca.utils.EventCounter(condition=None)

   Bases: "vacca.utils.EventFilter"

class class vacca.utils.EventFilter(condition=None)

   Bases: "object"

class class vacca.utils.MyTaurusComponent(name='test')

   Bases: "taurus.qt.qtgui.base.taurusbase.TaurusBaseComponent",
   "PyQt4.QtCore.QObject"

   fireEvent(evt_src=None, evt_type=None, evt_value=None)

   handleEvent(*args, **kwargs)

   setMyHandler(handler)

class class vacca.utils.OnChangeOrTimeEventFilter

   Bases: "vacca.utils.EventFilter"

   The instances of this class will be callables that can be used as
   filters of repeated-value events. If the event type is Change or
   Periodic, it will only pass when its evt_value.value is different
   from that of the last event received from the same source and type.
   If evt_value.value is not available in the current event, the whole
   evt_value is used for comparison and as a future reference. But!,
   if setMaxDeltaTime is set, then any event that occurred more than
   Delta Time seconds  after the last one will be allowed to pass
   through the chain.

   This is useful to avoid processing repetitive events.

   Note that you cannot use this class as a filter: you need to use an
   instance of it.

   Note 2: Use a different instance each time you insert this filter
   into a different widget unless you *really* know what you are
   doing.

   Example of usage::
      evf = OnChangeOrTimeEventFilter() evf.setDeltaTime(60.) filters
      = [evf, IGNORE_CONFIG]
      MyTaurusComponentInstance.setEventFilters(filters,preqt=True)
      filterEvent(s, t, v, filters)

   setDeltaTime(mindiff)

   setDeltaValue(mindiff)

class class vacca.utils.WidgetAcceptDrops

   Bases: "object"

   TAURUS_ATTR_MIME_TYPE = 'application/taurus-attribute'

   TAURUS_DEV_MIME_TYPE = 'application/taurus-device'

   TAURUS_MODEL_LIST_MIME_TYPE = 'text/uri-list'

   TAURUS_MODEL_MIME_TYPE = 'application/taurus-model'

   TEXT_MIME_TYPE = 'text/plain'

   checkDrops()

   checkSupportedMimeType(event, accept=False)

   dragEnterEvent(event)

   dragMoveEvent(event)

   dropEvent(event)

      reimplemented to support drag&drop of models. See "QWidget"

   getSupportedMimeTypes()

   setDropEventCallback(callback)

   setSupportedMimeTypes(mimes)

class class vacca.utils.addCustomPanel2Gui(extra_panels=None)

   Bases: "object"

   this Class is used to add new panel to existing TaurusGUI with the
   same Context. Each extra_panel class should have a
   'getPaneldescription' and getDefaultIcon methods.

   Pass a dictionary like this:
      EXTRA_PANELS['VaccaProperties'] = {
         'class': vacca.VaccaPropTable, 'icon': ':/places/network-
         server.svg', }

vacca.utils.get_White_palette(palette=None)

vacca.utils.get_config_file()

vacca.utils.get_fullWhite_palette(palette=None)

vacca.utils.get_halfWhite_palette(palette=None)

vacca.utils.get_shared_data_manager()

   sdm = get_shared_data_manager() #Qt.qApp.SDM Singletone sdm.connec
   tReader('channelName',objectInstance.method,readOnConnect=False)
   #Using instantiated object/function instead of names!!
   sdm.connectWriter('SelectedInstrument',out_hook,'modelChanged')
   #'Channel', object, 'qt signal name'

vacca.utils.get_shared_data_signals()

vacca.utils.get_solid_brush(r, g, b, pattern=None)

vacca.utils.vpath(s)

vacca.utils.wdir(s)
